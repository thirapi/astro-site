---
const { class: className, ...rest } = Astro.props;
---

<button 
  id="themeToggle" 
  class={className} 
  aria-label="Toggle dark mode"
  title="Toggle dark mode"
  {...rest}
>
  <svg
    width="30px"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 24 24"
    class="icon"
    aria-hidden="true"
  >
    <path
      class="sun"
      fill-rule="evenodd"
      d="M12 17.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zm0 1.5a7 7 0 1 0 0-14 7 7 0 0 0 0 14zm12-7a.8.8 0 0 1-.8.8h-2.4a.8.8 0 0 1 0-1.6h2.4a.8.8 0 0 1 .8.8zM4 12a.8.8 0 0 1-.8.8H.8a.8.8 0 0 1 0-1.6h2.5a.8.8 0 0 1 .8.8zm16.5-8.5a.8.8 0 0 1 0 1l-1.8 1.8a.8.8 0 0 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM6.3 17.7a.8.8 0 0 1 0 1l-1.7 1.8a.8.8 0 1 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM12 0a.8.8 0 0 1 .8.8v2.5a.8.8 0 0 1-1.6 0V.8A.8.8 0 0 1 12 0zm0 20a.8.8 0 0 1 .8.8v2.4a.8.8 0 0 1-1.6 0v-2.4a.8.8 0 0 1 .8-.8zM3.5 3.5a.8.8 0 0 1 1 0l1.8 1.8a.8.8 0 1 1-1 1L3.5 4.6a.8.8 0 0 1 0-1zm14.2 14.2a.8.8 0 0 1 1 0l1.8 1.7a.8.8 0 0 1-1 1l-1.8-1.7a.8.8 0 0 1 0-1z"
    ></path>
    <path
      class="moon"
      fill-rule="evenodd"
      d="M16.5 6A10.5 10.5 0 0 1 4.7 16.4 8.5 8.5 0 1 0 16.4 4.7l.1 1.3zm-1.7-2a9 9 0 0 1 .2 2 9 9 0 0 1-11 8.8 9.4 9.4 0 0 1-.8-.3c-.4 0-.8.3-.7.7a10 10 0 0 0 .3.8 10 10 0 0 0 9.2 6 10 10 0 0 0 4-19.2 9.7 9.7 0 0 0-.9-.3c-.3-.1-.7.3-.6.7a9 9 0 0 1 .3.8z"
    ></path>
  </svg>
</button>
<style>
  /* === Improved Button Styling === */
  #themeToggle {
    background-color: transparent;
    border: none;
    padding: 10px;
    cursor: pointer;
    transition:
      background-color 0.3s ease,
      box-shadow 0.3s ease;
    border-radius: 8px;
  }

  #themeToggle:hover {
    background-color: rgba(0, 0, 0, 0.05);
  }

  :global(.dark) #themeToggle:hover {
    background-color: rgba(255, 255, 255, 0.1);
  }

  #themeToggle:focus-visible {
    outline: 2px solid hsl(var(--ring));
    outline-offset: 2px;
  }

  /* === Icon Styling & Transitions === */
  .icon {
    width: 24px;
    height: 24px;
    transition: transform 0.4s ease;
  }

  .sun,
  .moon {
    transition: fill 0.4s ease;
  }

  .sun {
    fill: black;
  }

  .moon {
    fill: transparent;
  }

  :global(.dark) .sun {
    fill: transparent;
  }

  :global(.dark) .moon {
    fill: white;
  }
</style>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const theme = (() => {
      const localStorageTheme = localStorage?.getItem("theme") ?? "";
      if (["dark", "light"].includes(localStorageTheme)) {
        return localStorageTheme;
      }
      if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
        return "dark";
      }
      return "light";
    })();

    if (theme === "light") {
      document.documentElement.classList.remove("dark");
    } else {
      document.documentElement.classList.add("dark");
    }

    localStorage.setItem("theme", theme);

    const toggleBtn = document.getElementById("themeToggle");
    if (toggleBtn) {
      toggleBtn.addEventListener("click", () => {
        const root = document.documentElement;
        root.classList.toggle("dark");
        const isDark = root.classList.contains("dark");
        localStorage.setItem("theme", isDark ? "dark" : "light");
        
        // Update aria-label for screen readers
        toggleBtn.setAttribute("aria-label", isDark ? "Switch to light mode" : "Switch to dark mode");
      });

      // Set initial aria-label
      const isDark = document.documentElement.classList.contains("dark");
      toggleBtn.setAttribute("aria-label", isDark ? "Switch to light mode" : "Switch to dark mode");
    }

    // Listen for system theme changes (only if user hasn't set a preference)
    const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
    mediaQuery.addEventListener("change", (e) => {
      const userTheme = localStorage.getItem("theme");
      // Only auto-update if user hasn't explicitly set a theme
      if (!userTheme) {
        const root = document.documentElement;
        if (e.matches) {
          root.classList.add("dark");
        } else {
          root.classList.remove("dark");
        }
      }
    });
  });
</script>
